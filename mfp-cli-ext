#!/usr/bin/env node

// * Make it fail with invalid params
// Get a good gitignore in place

var child_process = require('child_process');
var fs = require('fs');
var log = require('npmlog');
var nopt = require('nopt');
var path = require('path');

var pkg = require('./package.json');

var mfpcliext = {};

mfpcliext.XCODE_LOCATION = "/Applications/XCode.app";
mfpcliext.CLI_LOCATION = "/Applications/IBM/MobileFirst-CLI/mfp";
mfpcliext.SERVER_LOCATION = "~/.ibm/mobilefirst/6.3.0/server/";

var opts = nopt({
    debug: Boolean,
    verbose: Boolean
}, {
    d: '--debug',
    v: '--verbose'
});

if(opts.debug) {
    log.level = 'silly';
} else if(opts.verbose) {
    log.level = 'verbose';
} else {
    log.level = 'warn';
}

log.heading = pkg.name;

mfpcliext.argv = opts.argv.remain;

if (mfpcliext.argv[0]) {
    mfpcliext.action = mfpcliext.argv.shift();
} else {
    mfpcliext.action = 'help';
}

mfpcliext.action = mfpcliext.action.toLowerCase();

log.silly("Action is: " + mfpcliext.action);

var findMfpApp = function() {
    var pathSoFar = process.cwd();

    while(!fs.existsSync(path.join(pathSoFar, 'application-descriptor.xml'))) {
        var newPath = path.dirname(pathSoFar);
        if(newPath === pathSoFar) {
            pathSoFar = null;
            break;
        } else {
            pathSoFar = newPath;
        }
    }

    return pathSoFar;
};

if (mfpcliext.action === 'help') {
    console.log("Help!");
} else if(mfpcliext.action === 'native-ide') {
    log.verbose("About to open native IDE");
    appDir = findMfpApp();
    if(appDir === null) {
        log.error("Cannot find mfp application");
    }
    xcode = child_process.spawn('open', ['-a', mfpcliext.XCODE_LOCATION, path.join(appDir, mfpcliext.argv[0], "native")]);
} else {
    log.warn("Unknown command");
}
