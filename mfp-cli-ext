#!/usr/bin/env python3

from subprocess import Popen
from sys import platform as _platform
import argparse
import logging
import logging.handlers
import os
import os.path
import sys

CLI_LOCATION = "/Applications/IBM/MobileFirst-CLI/mfp"
XCODE_LOCATION = "/Applications/XCode.app"

SERVER_LOCATION = "~/.ibm/mobilefirst/6.3.0/server/"


def main():
    parser = argparse.ArgumentParser(description="Unofficial extension to IBM MobileFirst Platform Foundation " +
                                     "(formerly IBM Worklight) CLI tools. " +
                                     "See https://github.com/andrewferrier/mfp-cli-ext for more information.")

    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help="Make the output more verbose. Using this twice makes it doubly verbose.")

    parser.add_argument('command', help='The command you want to execute. This can be one of: native-ide')
    parser.add_argument('otherparams', nargs='*')

    args = parser.parse_args()

    if args.verbose > 1:
        sysErrHandler.setLevel(logging.DEBUG)
    elif args.verbose == 1:
        sysErrHandler.setLevel(logging.INFO)
    else:
        sysErrHandler.setLevel(logging.WARNING)

    if(args.command.lower() == 'native-ide'):
        logger.debug("About to open native IDE")
        app_dir = find_mfp_app()
        if app_dir is None:
            raise FatalException("Could not find mfp application")
        p = Popen(['open', '-a', XCODE_LOCATION, os.path.join(args.otherparams[0], "native")])
        p.communicate()
    else:
        logger.debug("About to default to mfp command with command " + args.command + " and params " + str(args.otherparams))
        arguments = [CLI_LOCATION, args.command]
        arguments.extend(args.otherparams)
        p = Popen(arguments)
        p.communicate()


def find_mfp_app():
    path = os.getcwd()
    while not os.path.exists(os.path.join(path, 'application-descriptor.xml')):
        newpath = os.path.dirname(path)
        if os.path.samefile(path, newpath):
            break
        else:
            path = newpath
    else:
        return path

    return None

logger = logging.getLogger(os.path.basename(__file__))

if _platform == "linux" or _platform == "linux2":
    sysLogAddress = '/dev/log'
elif _platform == "darwin":
    sysLogAddress = '/var/run/syslog'
else:
    print("Unsupported platform.")
    sys.exit(3)

sysErrHandler = logging.StreamHandler(stream=sys.stderr)
sysErrHandler.setLevel(logging.WARNING)
sysErrFormatter = logging.Formatter('%(levelname)s: %(message)s')
sysErrHandler.setFormatter(sysErrFormatter)
logger.addHandler(sysErrHandler)


class ExitCodeException(Exception):
    def __new__(cls, *args, **kwargs):
        if cls is ExitCodeException:
            raise NotImplementedError("ExitCodeException class may not be instantiated directly.")
        return Exception.__new__(cls, *args, **kwargs)

    def __init__(self, message):
        super().__init__()
        self._message = message

    def __str__(self):
        return repr(self._message)

    def getExitCode(self):
        """Return the exit code for this exception"""
        pass


class FatalException(ExitCodeException):
    def getExitCode(self):
        return 2


def handle_uncaught_exception(exctype, value, trace):
    if isinstance(value, FatalException):
        logger.error(value)
        sys.exit(value.getExitCode())
    else:
        logger.error(value)
        oldHook(exctype, value, trace)

sys.excepthook, oldHook = handle_uncaught_exception, sys.excepthook

if __name__ == "__main__":
    main()
